[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "aws" (hashicorp/aws) 2.67.0...
- Downloading plugin for provider "http" (hashicorp/http) 1.2.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.http: version = "~> 1.2"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.http.workstation-external-ip: Refreshing state...
data.aws_availability_zones.available: Refreshing state...
data.aws_region.current: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eks_cluster.demo will be created
  + resource "aws_eks_cluster" "demo" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "terraform-eks-demo"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + version               = (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # aws_eks_node_group.demo will be created
  + resource "aws_eks_node_group" "demo" {
      + ami_type        = (known after apply)
      + arn             = (known after apply)
      + cluster_name    = "terraform-eks-demo"
      + disk_size       = (known after apply)
      + id              = (known after apply)
      + instance_types  = (known after apply)
      + node_group_name = "demo"
      + node_role_arn   = (known after apply)
      + release_version = (known after apply)
      + resources       = (known after apply)
      + status          = (known after apply)
      + subnet_ids      = (known after apply)
      + version         = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 1
          + min_size     = 1
        }
    }

  # aws_iam_role.demo-cluster will be created
  + resource "aws_iam_role" "demo-cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-eks-demo-cluster"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role.demo-node will be created
  + resource "aws_iam_role" "demo-node" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-eks-demo-node"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "terraform-eks-demo-cluster"
    }

  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "terraform-eks-demo-cluster"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "terraform-eks-demo-node"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "terraform-eks-demo-node"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "terraform-eks-demo-node"
    }

  # aws_internet_gateway.demo will be created
  + resource "aws_internet_gateway" "demo" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "terraform-eks-demo"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.demo will be created
  + resource "aws_route_table" "demo" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.demo[0] will be created
  + resource "aws_route_table_association" "demo" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.demo[1] will be created
  + resource "aws_route_table_association" "demo" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.demo-cluster will be created
  + resource "aws_security_group" "demo-cluster" {
      + arn                    = (known after apply)
      + description            = "Cluster communication with worker nodes"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "terraform-eks-demo-cluster"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "terraform-eks-demo"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group_rule.demo-cluster-ingress-workstation-https will be created
  + resource "aws_security_group_rule" "demo-cluster-ingress-workstation-https" {
      + cidr_blocks              = [
          + "3.14.4.236/32",
        ]
      + description              = "Allow workstation to communicate with the cluster API Server"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # aws_subnet.demo[0] will be created
  + resource "aws_subnet" "demo" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-west-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.demo[1] will be created
  + resource "aws_subnet" "demo" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-west-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.demo will be created
  + resource "aws_vpc" "demo" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
    }

Plan: 18 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform apply
data.http.workstation-external-ip: Refreshing state...
data.aws_region.current: Refreshing state...
data.aws_availability_zones.available: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eks_cluster.demo will be created
  + resource "aws_eks_cluster" "demo" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "terraform-eks-demo"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + version               = (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # aws_eks_node_group.demo will be created
  + resource "aws_eks_node_group" "demo" {
      + ami_type        = (known after apply)
      + arn             = (known after apply)
      + cluster_name    = "terraform-eks-demo"
      + disk_size       = (known after apply)
      + id              = (known after apply)
      + instance_types  = (known after apply)
      + node_group_name = "demo"
      + node_role_arn   = (known after apply)
      + release_version = (known after apply)
      + resources       = (known after apply)
      + status          = (known after apply)
      + subnet_ids      = (known after apply)
      + version         = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 1
          + min_size     = 1
        }
    }

  # aws_iam_role.demo-cluster will be created
  + resource "aws_iam_role" "demo-cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-eks-demo-cluster"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role.demo-node will be created
  + resource "aws_iam_role" "demo-node" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "terraform-eks-demo-node"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "terraform-eks-demo-cluster"
    }

  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "terraform-eks-demo-cluster"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "terraform-eks-demo-node"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "terraform-eks-demo-node"
    }

  # aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "terraform-eks-demo-node"
    }

  # aws_internet_gateway.demo will be created
  + resource "aws_internet_gateway" "demo" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "terraform-eks-demo"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.demo will be created
  + resource "aws_route_table" "demo" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.demo[0] will be created
  + resource "aws_route_table_association" "demo" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.demo[1] will be created
  + resource "aws_route_table_association" "demo" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.demo-cluster will be created
  + resource "aws_security_group" "demo-cluster" {
      + arn                    = (known after apply)
      + description            = "Cluster communication with worker nodes"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "terraform-eks-demo-cluster"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "terraform-eks-demo"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group_rule.demo-cluster-ingress-workstation-https will be created
  + resource "aws_security_group_rule" "demo-cluster-ingress-workstation-https" {
      + cidr_blocks              = [
          + "3.14.4.236/32",
        ]
      + description              = "Allow workstation to communicate with the cluster API Server"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # aws_subnet.demo[0] will be created
  + resource "aws_subnet" "demo" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-west-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.demo[1] will be created
  + resource "aws_subnet" "demo" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "us-west-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.demo will be created
  + resource "aws_vpc" "demo" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name"                                     = "terraform-eks-demo-node"
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"
        }
    }

Plan: 18 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.demo-node: Creating...
aws_vpc.demo: Creating...
aws_iam_role.demo-cluster: Creating...
aws_iam_role.demo-cluster: Creation complete after 0s [id=terraform-eks-demo-cluster]
aws_iam_role.demo-node: Creation complete after 0s [id=terraform-eks-demo-node]
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy: Creating...
aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy: Creating...
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy: Creating...
aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly: Creating...
aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy: Creating...
aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy: Creation complete after 0s [id=terraform-eks-demo-node-20200622094526217000000003]
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy: Creation complete after 0s [id=terraform-eks-demo-cluster-20200622094526212400000001]
aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy: Creation complete after 0s [id=terraform-eks-demo-node-20200622094526214600000002]
aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly: Creation complete after 0s [id=terraform-eks-demo-node-20200622094526238800000004]
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy: Creation complete after 0s [id=terraform-eks-demo-cluster-20200622094526244400000005]
aws_vpc.demo: Creation complete after 3s [id=vpc-01cac6d8ecf497b11]
aws_subnet.demo[0]: Creating...
aws_security_group.demo-cluster: Creating...
aws_subnet.demo[1]: Creating...
aws_internet_gateway.demo: Creating...
aws_subnet.demo[0]: Creation complete after 2s [id=subnet-0e12c049215639863]
aws_subnet.demo[1]: Creation complete after 2s [id=subnet-0fec0f3836959ba3a]
aws_internet_gateway.demo: Creation complete after 2s [id=igw-0a84f48c332cb55a8]
aws_route_table.demo: Creating...
aws_security_group.demo-cluster: Creation complete after 3s [id=sg-0476ba436efebcd49]
aws_security_group_rule.demo-cluster-ingress-workstation-https: Creating...
aws_eks_cluster.demo: Creating...
aws_route_table.demo: Creation complete after 1s [id=rtb-0a65cf5e23eae4969]
aws_route_table_association.demo[0]: Creating...
aws_route_table_association.demo[1]: Creating...
aws_route_table_association.demo[1]: Creation complete after 0s [id=rtbassoc-0370b47e1aa386d3e]
aws_route_table_association.demo[0]: Creation complete after 0s [id=rtbassoc-0d7b328d8fc5dd75a]
aws_security_group_rule.demo-cluster-ingress-workstation-https: Creation complete after 1s [id=sgrule-3425275403]
aws_eks_cluster.demo: Still creating... [10s elapsed]
aws_eks_cluster.demo: Still creating... [20s elapsed]
aws_eks_cluster.demo: Still creating... [30s elapsed]
aws_eks_cluster.demo: Still creating... [40s elapsed]
aws_eks_cluster.demo: Still creating... [50s elapsed]
aws_eks_cluster.demo: Still creating... [1m0s elapsed]
aws_eks_cluster.demo: Still creating... [1m10s elapsed]
aws_eks_cluster.demo: Still creating... [1m20s elapsed]
aws_eks_cluster.demo: Still creating... [1m30s elapsed]
aws_eks_cluster.demo: Still creating... [1m40s elapsed]
aws_eks_cluster.demo: Still creating... [1m50s elapsed]
aws_eks_cluster.demo: Still creating... [2m0s elapsed]
aws_eks_cluster.demo: Still creating... [2m10s elapsed]
aws_eks_cluster.demo: Still creating... [2m20s elapsed]
aws_eks_cluster.demo: Still creating... [2m30s elapsed]
aws_eks_cluster.demo: Still creating... [2m40s elapsed]
aws_eks_cluster.demo: Still creating... [2m50s elapsed]
aws_eks_cluster.demo: Still creating... [3m0s elapsed]
aws_eks_cluster.demo: Still creating... [3m10s elapsed]
aws_eks_cluster.demo: Still creating... [3m20s elapsed]
aws_eks_cluster.demo: Still creating... [3m30s elapsed]
aws_eks_cluster.demo: Still creating... [3m40s elapsed]
aws_eks_cluster.demo: Still creating... [3m50s elapsed]
aws_eks_cluster.demo: Still creating... [4m0s elapsed]
aws_eks_cluster.demo: Still creating... [4m10s elapsed]
aws_eks_cluster.demo: Still creating... [4m20s elapsed]
aws_eks_cluster.demo: Still creating... [4m30s elapsed]
aws_eks_cluster.demo: Still creating... [4m40s elapsed]
aws_eks_cluster.demo: Still creating... [4m50s elapsed]
aws_eks_cluster.demo: Still creating... [5m0s elapsed]
aws_eks_cluster.demo: Still creating... [5m10s elapsed]
aws_eks_cluster.demo: Still creating... [5m20s elapsed]
aws_eks_cluster.demo: Still creating... [5m30s elapsed]
aws_eks_cluster.demo: Still creating... [5m40s elapsed]
aws_eks_cluster.demo: Still creating... [5m50s elapsed]
aws_eks_cluster.demo: Still creating... [6m0s elapsed]
aws_eks_cluster.demo: Still creating... [6m10s elapsed]
aws_eks_cluster.demo: Still creating... [6m20s elapsed]
aws_eks_cluster.demo: Still creating... [6m30s elapsed]
aws_eks_cluster.demo: Still creating... [6m40s elapsed]
aws_eks_cluster.demo: Still creating... [6m50s elapsed]
aws_eks_cluster.demo: Still creating... [7m0s elapsed]
aws_eks_cluster.demo: Still creating... [7m10s elapsed]
aws_eks_cluster.demo: Still creating... [7m20s elapsed]
aws_eks_cluster.demo: Still creating... [7m30s elapsed]
aws_eks_cluster.demo: Still creating... [7m40s elapsed]
aws_eks_cluster.demo: Still creating... [7m50s elapsed]
aws_eks_cluster.demo: Still creating... [8m0s elapsed]
aws_eks_cluster.demo: Still creating... [8m10s elapsed]
aws_eks_cluster.demo: Still creating... [8m20s elapsed]
aws_eks_cluster.demo: Still creating... [8m30s elapsed]
aws_eks_cluster.demo: Still creating... [8m40s elapsed]
aws_eks_cluster.demo: Still creating... [8m50s elapsed]
aws_eks_cluster.demo: Still creating... [9m0s elapsed]
aws_eks_cluster.demo: Still creating... [9m10s elapsed]
aws_eks_cluster.demo: Still creating... [9m20s elapsed]
aws_eks_cluster.demo: Still creating... [9m30s elapsed]
aws_eks_cluster.demo: Still creating... [9m40s elapsed]
aws_eks_cluster.demo: Still creating... [9m50s elapsed]
aws_eks_cluster.demo: Creation complete after 9m53s [id=terraform-eks-demo]
aws_eks_node_group.demo: Creating...
aws_eks_node_group.demo: Still creating... [10s elapsed]
aws_eks_node_group.demo: Still creating... [20s elapsed]
aws_eks_node_group.demo: Still creating... [30s elapsed]
aws_eks_node_group.demo: Still creating... [40s elapsed]
aws_eks_node_group.demo: Still creating... [50s elapsed]
aws_eks_node_group.demo: Still creating... [1m0s elapsed]
aws_eks_node_group.demo: Still creating... [1m10s elapsed]
aws_eks_node_group.demo: Still creating... [1m20s elapsed]
aws_eks_node_group.demo: Still creating... [1m30s elapsed]
aws_eks_node_group.demo: Still creating... [1m40s elapsed]
aws_eks_node_group.demo: Still creating... [1m50s elapsed]
aws_eks_node_group.demo: Still creating... [2m0s elapsed]
aws_eks_node_group.demo: Still creating... [2m10s elapsed]
aws_eks_node_group.demo: Still creating... [2m20s elapsed]
aws_eks_node_group.demo: Still creating... [2m30s elapsed]
aws_eks_node_group.demo: Still creating... [2m40s elapsed]
aws_eks_node_group.demo: Creation complete after 2m41s [id=terraform-eks-demo:demo]

Apply complete! Resources: 18 added, 0 changed, 0 destroyed.

Outputs:

config_map_aws_auth =

apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::271768720017:role/terraform-eks-demo-node
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes

kubeconfig =

apiVersion: v1
clusters:
- cluster:
    server: https://2F60486AD9D9FCA9223FFD42E4403D1B.gr7.us-west-2.eks.amazonaws.com
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EWXlNakE1TlRNd00xb1hEVE13TURZeU1EQTVOVE13TTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTU5wCjZwYjZWczF4ZlZGU3R3YlNNTGQ3cmRBd2hHT1BZUjNVV0FyNEYya0tIWGxsK0hmOTgwMTYvNHlrM1JoL2VCUVoKaDlMWmhzamRVN2Fuc1QvSXl6Njh1RDZiZk9wS3hKWmlXdlgwNVE3VjFyekMvSkpJWG9GL0JpZDlHSUc5UVhnMApvdWgzbGRZdzVBZVlRUWtVNXpEQ0tEUmVmZm1wc1p6QWxhdUJrbVNzOFBjS1hlbGorR05Va3E2UHhoandjMlVYCkl3cEs0SncwR2pwSDNNNXlWbXJrMHJ3MzB0R0NmMmJmRityZUp2a25hWjNROXdxWEl4aEF5Yjl5ZjJvd3FtNk0KbG1iWndNMlJYekRERGZua0ZIK2dQMGtlRGpZa09XQU9wc1Q5aFR0S0xwbDhCSU5OTWNlREVwRndEWm90RFNocAo3Z1FLaUxHcWUySzV2NlpNdGRjQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEeEExSy9GRGZyMmtqWDdjR2JJOWxVYU1QRUsKanVaK00rQ2NCajFOd2xuV3ZLNFVxcnJWdFBpcXNENGhOVmFRQ0VGTjJESy8zeDRTMXVjSlU1NGtnTEk5Ykk2MwpyamdFelNRTWp2SE5abmZkZ2orYml0OWVHNFk2N1l6SFdsckx3SXZaQUtUMytJNGcyekpqZXllSkJGU2ZHQ1llCmZxN3gwdXA5eENWNWpRRFR1WGlkUDlZd2lEVGwvejZxYVYyV0l5ZzArMytpOHphN0tpTUtjSkprOHQrUGZ1ODkKQkpFVU5zSWx3b0diL1RDay9ISmVpVDUzTjVhYTRTTCtQVWMvOXZDSTZKOVl0Z1lXdEwvcTF4SDhLYXlaMEJoMwoxZVA4cTBPTDhpSUNMWWZXU21sNTNNeklsTFN4WVo1MWU3cHZ6YnhQQnl5M2ZWcFdPU1VuM2x1dmpOND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: aws-iam-authenticator
      args:
        - "token"
        - "-i"
        - "terraform-eks-demo"
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform state list
data.aws_availability_zones.available
data.aws_region.current
data.http.workstation-external-ip
aws_eks_cluster.demo
aws_eks_node_group.demo
aws_iam_role.demo-cluster
aws_iam_role.demo-node
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy
aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly
aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy
aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy
aws_internet_gateway.demo
aws_route_table.demo
aws_route_table_association.demo[0]
aws_route_table_association.demo[1]
aws_security_group.demo-cluster
aws_security_group_rule.demo-cluster-ingress-workstation-https
aws_subnet.demo[0]
aws_subnet.demo[1]
aws_vpc.demo
[centos@ip-10-0-1-83 ~]$ mkdir .kube
[centos@ip-10-0-1-83 ~]$ cd terraform-eks-getting-started
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform output kubeconfig>~/.kube/config
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ kubectl get nodes
NAME                                      STATUS   ROLES    AGE     VERSION
ip-10-0-0-45.us-west-2.compute.internal   Ready    <none>   9m57s   v1.16.8-eks-e16311
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ nano deploy.yml
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ nano svc.yml
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ kubectl create -f deploy.yml
deployment.apps/webapp-deploy created
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terraform output config_map_aws_auth > configmap.yml
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ kubectl apply -f configmap.yml
Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
configmap/aws-auth configured
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ kubectl create -f svc.yml
service/webapp-svc created
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ kubectl get service
NAME            TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)          AGE
kubernetes      ClusterIP      172.20.0.1       <none>                                                                   443/TCP          48m
webapp-deploy   LoadBalancer   172.20.227.202   afd7241ca9d0f463e8fb48e203c794d7-888912849.us-west-2.elb.amazonaws.com   8080:30440/TCP   3m57s
webapp-svc      NodePort       172.20.166.53    <none>                                                                   8080:31000/TCP   17s
[centos@ip-10-0-1-83 terraform-eks-getting-started]$ terrafrom destroy
